{"version":3,"sources":["images/companyLogo.png","images/AboutUs.png","images/ourVision.png","images/AppLogo.png","components/Header.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","companyLogo","companyLogoImage","className","src","alt","Body","visionImage","visionImg","appLogo","appLogoImage","contactImage","aboutUsImg","App","icon","faMailBulk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,sMCqB5BC,EAjBA,WACX,IAAMC,EAAcC,IAEpB,OACI,6BACI,0BAAMC,UAAU,QACZ,yBAAKC,IAAKH,EAAaE,UAAU,eAAeE,IAAI,UAExD,0BAAMF,UAAU,SACZ,wBAAIA,UAAU,cAAd,c,iDC6DDG,EArEF,WAET,IAAMC,EAAcC,IACdC,EAAUC,IACVC,EAAeC,IAErB,OACI,6BACI,yBAAKT,UAAU,cACX,yBAAKA,UAAU,QACX,0BAAMA,UAAU,aACZ,yBAAKC,IAAKG,EAAaJ,UAAU,mBAAmBE,IAAI,QAGhE,yBAAKF,UAAU,SACX,wBAAIA,UAAU,uBAAd,cAGA,yBAAKA,UAAU,sBAAf,+HAQR,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,QACP,0BAAMA,UAAU,aACZ,yBAAKC,IAAKK,EAASN,UAAU,oBAAoBE,IAAI,WAGjE,yBAAKF,UAAU,SACX,wBAAIA,UAAU,uBAAd,gBAGA,wBAAIA,UAAU,YAAd,cACA,yBAAKA,UAAU,sBAAf,uGAEyD,6BAAM,6BAF/D,uCAIwC,6BAJxC,4CASR,yBAAKA,UAAU,cACX,yBAAKA,UAAU,QACP,0BAAMA,UAAU,aACZ,yBAAKC,IAAKO,EAAcR,UAAU,mBAAmBE,IAAI,QAGrE,yBAAKF,UAAU,SACX,wBAAIA,UAAU,uBAAd,YAGA,yBAAKA,UAAU,sBAAf,iOC/BLU,MAvBf,WAEI,OACI,yBAAKV,UAAU,OACX,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,cACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,eACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,cACX,kBAAC,IAAD,CAAiBA,UAAU,YAAYW,KAAMC,MAC7C,0CAAkB,6BAAM,6BAF5B,uBAIwB,6BAJxB,+CCPQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4583113c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/companyLogo.7a056dd1.png\";","module.exports = __webpack_public_path__ + \"static/media/AboutUs.5855397f.png\";","module.exports = __webpack_public_path__ + \"static/media/ourVision.ac0dc9a3.png\";","module.exports = __webpack_public_path__ + \"static/media/AppLogo.2f44cda3.png\";","import React from \"react\";\nimport companyLogoImage from '../images/companyLogo.png';\n\n\nconst Header = () => {\n    const companyLogo = companyLogoImage;\n\n    return (\n        <div>\n            <span className=\"logo\">\n                <img src={companyLogo} className=\"company-logo\" alt=\"logo\" />\n            </span>\n            <span className=\"title\">\n                <h2 className=\"title-name\">\n                    WATTDEV\n                </h2>\n            </span>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from \"react\";\nimport aboutUsImg from \"../images/AboutUs.png\";\nimport visionImg from \"../images/ourVision.png\";\nimport appLogoImage from \"../images/AppLogo.png\";\n\nconst Body = () => {\n\n    const visionImage = visionImg;\n    const appLogo = appLogoImage;\n    const contactImage = aboutUsImg;\n\n    return (\n        <div>\n            <div className=\"our-vision\">\n                <div className=\"left\">\n                    <span className=\"image-box\">\n                        <img src={visionImage} className=\"our-vision-image\" alt=\" \" />\n                    </span>\n                </div>\n                <div className=\"right\">\n                    <h3 className=\"information-headers\">\n                        Our Vision\n                    </h3>\n                    <div className=\"information-bodies\">\n                        We care about the nature and want to help people\n                        interact and share the best of the best from the\n                        nature with each other.\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"our-products\">\n                <div className=\"left\">\n                        <span className=\"image-box\">\n                            <img src={appLogo} className=\"our-product-image\" alt=\"logo\" />\n                        </span>\n                </div>\n                <div className=\"right\">\n                    <h3 className=\"information-headers\">\n                        Our Products\n                    </h3>\n                    <h4 className=\"SnapThat\"> SNAPTHAT </h4>\n                    <div className=\"information-bodies\">\n                        An application where users can upload and rate\n                        photos of animals, nature, landscape, and much more. <br /><br />\n\n                        Web application: Link available soon<br />\n                        Phone application: Link available soon\n                    </div>\n                </div>\n            </div>\n            <div className=\"contact-us\">\n                <div className=\"left\">\n                        <span className=\"image-box\">\n                            <img src={contactImage} className=\"contact-us-image\" alt=\" \" />\n                        </span>\n                </div>\n                <div className=\"right\">\n                    <h3 className=\"information-headers\">\n                        About us\n                    </h3>\n                    <div className=\"information-bodies\">\n                        We are eight students from Heriot Watt Univerity,\n                        Edinburgh.â€¨This Company page is part of our one-year\n                        program called Software Engineering. We are a company\n                        developing applications for browsers, iOS, and Android.\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Body;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMailBulk } from '@fortawesome/free-solid-svg-icons'\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\n\nfunction App() {\n\n    return (\n        <div className=\"app\">\n            <div className=\"shadow_overlay_left\" />\n            <div className=\"shadow_overlay_bottom\" />\n            <div className=\"app-header\">\n                <Header />\n            </div>\n            <div className=\"app-content\">\n                <Body />\n            </div>\n            <div className=\"app-footer\">\n                <FontAwesomeIcon className=\"mail-icon\" icon={faMailBulk} />\n                <u>Contact us:</u><br /><br />\n\n                Email: wrt1@hw.ac.uk<br />\n                Office: Heriot Watt University, Edinburgh\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}